using SaveOurShip2;
using BioShip;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using Verse;
using LivingBuildings;

namespace RimWorld
{
    public class IronWill : IMutation
    {
        bool IMutation.ShouldAddTo(CompBuildingBodyPart target)
        {
            bool ret = false;
            ret = ret || (target.parent.TryGetComp<CompShipHeart>() != null);
            ret = ret || (target.parent.TryGetComp<CompMutationWorker>() != null);
            return ret;
        }
        void IMutation.Apply(CompBuildingBodyPart target)
        {
            if (target.parent.TryGetComp<CompShipHeart>() != null)
            {
                Hediff_Building toAdd = new Hediff_Building();
                toAdd.label = "Iron Will";
                toAdd.visible = true;
                toAdd.statMods = new Dictionary<string, float>()
                {
                    {"conciousness", 1.33f},
                };
                target.AddHediff(toAdd);
            }
            if (target.parent.TryGetComp<CompMutationWorker>() != null)
            {
                target.parent.TryGetComp<CompMutationWorker>().RemoveMutation<IronWill>("defense", "psi");
                target.parent.TryGetComp<CompMutationWorker>().mutationThemes["psi"] += 2;
            }
        }
        void IMutation.Remove(CompBuildingBodyPart target)
        {
            if (target.parent.TryGetComp<CompShipHeart>() != null)
            {
                target.RemoveHediff("Efficient Growth");
            }
            if (target.parent.TryGetComp<CompMutationWorker>() != null)
            {
                target.parent.TryGetComp<CompMutationWorker>().AddMutation("defense", "psi", this);
                target.parent.TryGetComp<CompMutationWorker>().mutationThemes["humors"] -= 2;
            }

        }
        List<Tuple<IMutation, string, string>> IMutation.GetMutationsForTier(string tier, List<IMutation> existingMutations)
        {
            if (tier == "tier2")
            {
                return new List<Tuple<IMutation, string, string>>() { new Tuple<IMutation, string, string>(
                    new Reflect(),
                    "defense",
                    "psi") };
            }
            else
            {
                return new List<Tuple<IMutation, string, string>>();
            }
        }

        String IMutation.GetTier()
        {
            return "tier1";
        }
        String IMutation.GetDescription()
        {
            return "Iron Will\nIncreases the bioship's conciousness, reducing the heat generated by shields to the same level as their mechanical counterparts..";
        }
        public override string ToString()
        {
            return "Iron Will";
        }
        Texture2D IMutation.GetIcon()
        {
            return null;
        }
        void IExposable.ExposeData()
        {

        }
    }
}